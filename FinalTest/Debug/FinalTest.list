
FinalTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000050c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a0  080006a8  000106a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a0  080006a0  000106a8  2**0
                  CONTENTS
  4 .ARM          00000000  080006a0  080006a0  000106a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a0  080006a8  000106a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006a8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001848  00000000  00000000  000106d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ad  00000000  00000000  00011f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  000124d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00012768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bcb5  00000000  00000000  000129c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000161f  00000000  00000000  0001e67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003b654  00000000  00000000  0001fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0005b2f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae8  00000000  00000000  0005b3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000688 	.word	0x08000688

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000688 	.word	0x08000688

080001d4 <delay>:
#define BUTTON_B2_PIN       GPIO_Pin_3

#define BUTTON_B5_PORT      GPIOB
#define BUTTON_B5_PIN       GPIO_Pin_4

void delay(uint32_t time) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < time; i++);
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d8f8      	bhi.n	80001e2 <delay+0xe>
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <GPIO_Set>:

void GPIO_Set(GPIO_TypeDef *port, uint16_t pin, uint8_t status) {
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
 8000206:	460b      	mov	r3, r1
 8000208:	807b      	strh	r3, [r7, #2]
 800020a:	4613      	mov	r3, r2
 800020c:	707b      	strb	r3, [r7, #1]
    if (status == GPIO_PIN_SET) {
 800020e:	787b      	ldrb	r3, [r7, #1]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d103      	bne.n	800021c <GPIO_Set+0x1e>
        port->BSRRL = pin;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	887a      	ldrh	r2, [r7, #2]
 8000218:	831a      	strh	r2, [r3, #24]
    } else {
        port->BSRRH = pin;
    }
}
 800021a:	e002      	b.n	8000222 <GPIO_Set+0x24>
        port->BSRRH = pin;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	887a      	ldrh	r2, [r7, #2]
 8000220:	835a      	strh	r2, [r3, #26]
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <Button_Read>:

uint8_t Button_Read(GPIO_TypeDef *port, uint16_t pin) {
 800022e:	b480      	push	{r7}
 8000230:	b083      	sub	sp, #12
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
 8000236:	460b      	mov	r3, r1
 8000238:	807b      	strh	r3, [r7, #2]
    return (port->IDR & pin) ? 1 : 0;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	691a      	ldr	r2, [r3, #16]
 800023e:	887b      	ldrh	r3, [r7, #2]
 8000240:	4013      	ands	r3, r2
 8000242:	2b00      	cmp	r3, #0
 8000244:	bf14      	ite	ne
 8000246:	2301      	movne	r3, #1
 8000248:	2300      	moveq	r3, #0
 800024a:	b2db      	uxtb	r3, r3
}
 800024c:	4618      	mov	r0, r3
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <GPIO_Init_All>:

void GPIO_Init_All(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable clock
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800025e:	2101      	movs	r1, #1
 8000260:	2001      	movs	r0, #1
 8000262:	f000 f9cd 	bl	8000600 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000266:	2101      	movs	r1, #1
 8000268:	2002      	movs	r0, #2
 800026a:	f000 f9c9 	bl	8000600 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800026e:	2101      	movs	r1, #1
 8000270:	2004      	movs	r0, #4
 8000272:	f000 f9c5 	bl	8000600 <RCC_AHB1PeriphClockCmd>

    // Output: LED + Buzzer
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000276:	2301      	movs	r3, #1
 8000278:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800027a:	2300      	movs	r3, #0
 800027c:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800027e:	2302      	movs	r3, #2
 8000280:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	71fb      	strb	r3, [r7, #7]

    GPIO_InitStructure.GPIO_Pin = LED_GREEN_PIN;
 8000286:	2301      	movs	r3, #1
 8000288:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_GREEN_PORT, &GPIO_InitStructure);
 800028a:	463b      	mov	r3, r7
 800028c:	4619      	mov	r1, r3
 800028e:	4818      	ldr	r0, [pc, #96]	; (80002f0 <GPIO_Init_All+0x98>)
 8000290:	f000 f927 	bl	80004e2 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LED_BLUE_PIN;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED_BLUE_PORT, &GPIO_InitStructure);
 800029a:	463b      	mov	r3, r7
 800029c:	4619      	mov	r1, r3
 800029e:	4814      	ldr	r0, [pc, #80]	; (80002f0 <GPIO_Init_All+0x98>)
 80002a0:	f000 f91f 	bl	80004e2 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = LED3_BLUE_PIN;
 80002a4:	2308      	movs	r3, #8
 80002a6:	603b      	str	r3, [r7, #0]
    GPIO_Init(LED3_BLUE_PORT, &GPIO_InitStructure);
 80002a8:	463b      	mov	r3, r7
 80002aa:	4619      	mov	r1, r3
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <GPIO_Init_All+0x98>)
 80002ae:	f000 f918 	bl	80004e2 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = BUZZER_PIN;
 80002b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002b6:	603b      	str	r3, [r7, #0]
    GPIO_Init(BUZZER_PORT, &GPIO_InitStructure);
 80002b8:	463b      	mov	r3, r7
 80002ba:	4619      	mov	r1, r3
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <GPIO_Init_All+0x9c>)
 80002be:	f000 f910 	bl	80004e2 <GPIO_Init>

    // Input: Buttons
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80002c2:	2300      	movs	r3, #0
 80002c4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	71fb      	strb	r3, [r7, #7]

    GPIO_InitStructure.GPIO_Pin = BUTTON_B2_PIN;
 80002ca:	2308      	movs	r3, #8
 80002cc:	603b      	str	r3, [r7, #0]
    GPIO_Init(BUTTON_B2_PORT, &GPIO_InitStructure);
 80002ce:	463b      	mov	r3, r7
 80002d0:	4619      	mov	r1, r3
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <GPIO_Init_All+0xa0>)
 80002d4:	f000 f905 	bl	80004e2 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = BUTTON_B5_PIN;
 80002d8:	2310      	movs	r3, #16
 80002da:	603b      	str	r3, [r7, #0]
    GPIO_Init(BUTTON_B5_PORT, &GPIO_InitStructure);
 80002dc:	463b      	mov	r3, r7
 80002de:	4619      	mov	r1, r3
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <GPIO_Init_All+0xa0>)
 80002e2:	f000 f8fe 	bl	80004e2 <GPIO_Init>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40020000 	.word	0x40020000
 80002f4:	40020800 	.word	0x40020800
 80002f8:	40020400 	.word	0x40020400

080002fc <Blink>:

void Blink(GPIO_TypeDef *port, uint16_t pin, int times) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	460b      	mov	r3, r1
 8000306:	607a      	str	r2, [r7, #4]
 8000308:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < times; i++) {
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	e014      	b.n	800033a <Blink+0x3e>
        GPIO_Set(port, pin, GPIO_PIN_SET);
 8000310:	897b      	ldrh	r3, [r7, #10]
 8000312:	2201      	movs	r2, #1
 8000314:	4619      	mov	r1, r3
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f7ff ff71 	bl	80001fe <GPIO_Set>
        delay(300000);
 800031c:	480b      	ldr	r0, [pc, #44]	; (800034c <Blink+0x50>)
 800031e:	f7ff ff59 	bl	80001d4 <delay>
        GPIO_Set(port, pin, GPIO_PIN_RESET);
 8000322:	897b      	ldrh	r3, [r7, #10]
 8000324:	2200      	movs	r2, #0
 8000326:	4619      	mov	r1, r3
 8000328:	68f8      	ldr	r0, [r7, #12]
 800032a:	f7ff ff68 	bl	80001fe <GPIO_Set>
        delay(300000);
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <Blink+0x50>)
 8000330:	f7ff ff50 	bl	80001d4 <delay>
    for (int i = 0; i < times; i++) {
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	3301      	adds	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	697a      	ldr	r2, [r7, #20]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	429a      	cmp	r2, r3
 8000340:	dbe6      	blt.n	8000310 <Blink+0x14>
    }
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	3718      	adds	r7, #24
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	000493e0 	.word	0x000493e0

08000350 <main>:
    GPIO_Set(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
    delay(300000);
    GPIO_Set(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
}

int main(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
    GPIO_Init_All();
 8000356:	f7ff ff7f 	bl	8000258 <GPIO_Init_All>

    // Nháy LED BLUE một lần báo nguồn
    GPIO_Set(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000360:	4846      	ldr	r0, [pc, #280]	; (800047c <main+0x12c>)
 8000362:	f7ff ff4c 	bl	80001fe <GPIO_Set>
        GPIO_Set(LED3_BLUE_PORT, LED3_BLUE_PIN, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2108      	movs	r1, #8
 800036a:	4844      	ldr	r0, [pc, #272]	; (800047c <main+0x12c>)
 800036c:	f7ff ff47 	bl	80001fe <GPIO_Set>

        // Nháy LED BLUE một lần báo nguồn
        Blink(LED_BLUE_PORT, LED_BLUE_PIN, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000376:	4841      	ldr	r0, [pc, #260]	; (800047c <main+0x12c>)
 8000378:	f7ff ffc0 	bl	80002fc <Blink>
        Blink(LED3_BLUE_PORT, LED3_BLUE_PIN, 1);
 800037c:	2201      	movs	r2, #1
 800037e:	2108      	movs	r1, #8
 8000380:	483e      	ldr	r0, [pc, #248]	; (800047c <main+0x12c>)
 8000382:	f7ff ffbb 	bl	80002fc <Blink>
    // Thử nháy LED3_BLUE (PA3) để kiểm tra phần cứng
    Blink(LED3_BLUE_PORT, LED3_BLUE_PIN, 1);
 8000386:	2201      	movs	r2, #1
 8000388:	2108      	movs	r1, #8
 800038a:	483c      	ldr	r0, [pc, #240]	; (800047c <main+0x12c>)
 800038c:	f7ff ffb6 	bl	80002fc <Blink>

    uint8_t B2_last = 1;
 8000390:	2301      	movs	r3, #1
 8000392:	71fb      	strb	r3, [r7, #7]
    uint8_t B5_last = 1;
 8000394:	2301      	movs	r3, #1
 8000396:	71bb      	strb	r3, [r7, #6]
    uint8_t blue_on = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	717b      	strb	r3, [r7, #5]

    while (1) {
        //Nút B2: nháy GREEN + BLUE, còi kêu 1 lần
        uint8_t B2_state = Button_Read(BUTTON_B2_PORT, BUTTON_B2_PIN);
 800039c:	2108      	movs	r1, #8
 800039e:	4838      	ldr	r0, [pc, #224]	; (8000480 <main+0x130>)
 80003a0:	f7ff ff45 	bl	800022e <Button_Read>
 80003a4:	4603      	mov	r3, r0
 80003a6:	713b      	strb	r3, [r7, #4]
        if (B2_state == 0 && B2_last == 1) {
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d131      	bne.n	8000412 <main+0xc2>
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d12e      	bne.n	8000412 <main+0xc2>
            delay(100000); // debounce
 80003b4:	4833      	ldr	r0, [pc, #204]	; (8000484 <main+0x134>)
 80003b6:	f7ff ff0d 	bl	80001d4 <delay>
            if (Button_Read(BUTTON_B2_PORT, BUTTON_B2_PIN) == 0) {
 80003ba:	2108      	movs	r1, #8
 80003bc:	4830      	ldr	r0, [pc, #192]	; (8000480 <main+0x130>)
 80003be:	f7ff ff36 	bl	800022e <Button_Read>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d124      	bne.n	8000412 <main+0xc2>
                GPIO_Set(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2101      	movs	r1, #1
 80003cc:	482b      	ldr	r0, [pc, #172]	; (800047c <main+0x12c>)
 80003ce:	f7ff ff16 	bl	80001fe <GPIO_Set>
                GPIO_Set(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d8:	4828      	ldr	r0, [pc, #160]	; (800047c <main+0x12c>)
 80003da:	f7ff ff10 	bl	80001fe <GPIO_Set>
                GPIO_Set(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e4:	4828      	ldr	r0, [pc, #160]	; (8000488 <main+0x138>)
 80003e6:	f7ff ff0a 	bl	80001fe <GPIO_Set>
                delay(300000);
 80003ea:	4828      	ldr	r0, [pc, #160]	; (800048c <main+0x13c>)
 80003ec:	f7ff fef2 	bl	80001d4 <delay>
                GPIO_Set(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	4821      	ldr	r0, [pc, #132]	; (800047c <main+0x12c>)
 80003f6:	f7ff ff02 	bl	80001fe <GPIO_Set>
                GPIO_Set(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	481e      	ldr	r0, [pc, #120]	; (800047c <main+0x12c>)
 8000402:	f7ff fefc 	bl	80001fe <GPIO_Set>
                GPIO_Set(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040c:	481e      	ldr	r0, [pc, #120]	; (8000488 <main+0x138>)
 800040e:	f7ff fef6 	bl	80001fe <GPIO_Set>
            }
        }
        B2_last = B2_state;
 8000412:	793b      	ldrb	r3, [r7, #4]
 8000414:	71fb      	strb	r3, [r7, #7]

        //Nút B5: Toggle LED_BLUE (LED2 - PA10)
        uint8_t B5_state = Button_Read(BUTTON_B5_PORT, BUTTON_B5_PIN);
 8000416:	2110      	movs	r1, #16
 8000418:	4819      	ldr	r0, [pc, #100]	; (8000480 <main+0x130>)
 800041a:	f7ff ff08 	bl	800022e <Button_Read>
 800041e:	4603      	mov	r3, r0
 8000420:	70fb      	strb	r3, [r7, #3]
        if (B5_last == 1 && B5_state == 0) {  // Phát hiện cạnh xuống
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d121      	bne.n	800046c <main+0x11c>
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d11e      	bne.n	800046c <main+0x11c>
            delay(20000); // debounce
 800042e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000432:	f7ff fecf 	bl	80001d4 <delay>
            if (Button_Read(BUTTON_B5_PORT, BUTTON_B5_PIN) == 0) {
 8000436:	2110      	movs	r1, #16
 8000438:	4811      	ldr	r0, [pc, #68]	; (8000480 <main+0x130>)
 800043a:	f7ff fef8 	bl	800022e <Button_Read>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d113      	bne.n	800046c <main+0x11c>
                if (blue_on == 0) {
 8000444:	797b      	ldrb	r3, [r7, #5]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d108      	bne.n	800045c <main+0x10c>
                    GPIO_Set(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000450:	480a      	ldr	r0, [pc, #40]	; (800047c <main+0x12c>)
 8000452:	f7ff fed4 	bl	80001fe <GPIO_Set>
                    blue_on = 1;
 8000456:	2301      	movs	r3, #1
 8000458:	717b      	strb	r3, [r7, #5]
 800045a:	e007      	b.n	800046c <main+0x11c>
                } else {
                    GPIO_Set(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <main+0x12c>)
 8000464:	f7ff fecb 	bl	80001fe <GPIO_Set>
                    blue_on = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	717b      	strb	r3, [r7, #5]
                }
            }
        }
        B5_last = B5_state;
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	71bb      	strb	r3, [r7, #6]

        delay(10000);
 8000470:	f242 7010 	movw	r0, #10000	; 0x2710
 8000474:	f7ff feae 	bl	80001d4 <delay>
    while (1) {
 8000478:	e790      	b.n	800039c <main+0x4c>
 800047a:	bf00      	nop
 800047c:	40020000 	.word	0x40020000
 8000480:	40020400 	.word	0x40020400
 8000484:	000186a0 	.word	0x000186a0
 8000488:	40020800 	.word	0x40020800
 800048c:	000493e0 	.word	0x000493e0

08000490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000492:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopForever+0x6>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	; (80004d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <LoopForever+0xe>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <LoopForever+0x16>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004be:	f000 f8bf 	bl	8000640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c2:	f7ff ff45 	bl	8000350 <main>

080004c6 <LoopForever>:

LoopForever:
    b LoopForever
 80004c6:	e7fe      	b.n	80004c6 <LoopForever>
  ldr   r0, =_estack
 80004c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004d4:	080006a8 	.word	0x080006a8
  ldr r2, =_sbss
 80004d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004dc:	2000001c 	.word	0x2000001c

080004e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC_IRQHandler>

080004e2 <GPIO_Init>:
 80004e2:	b480      	push	{r7}
 80004e4:	b087      	sub	sp, #28
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	6039      	str	r1, [r7, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e076      	b.n	80005ec <GPIO_Init+0x10a>
 80004fe:	2201      	movs	r2, #1
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	693a      	ldr	r2, [r7, #16]
 800050e:	4013      	ands	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	429a      	cmp	r2, r3
 8000518:	d165      	bne.n	80005e6 <GPIO_Init+0x104>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	2103      	movs	r1, #3
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	43db      	mvns	r3, r3
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	4619      	mov	r1, r3
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d003      	beq.n	8000558 <GPIO_Init+0x76>
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d12e      	bne.n	80005b6 <GPIO_Init+0xd4>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689a      	ldr	r2, [r3, #8]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	2103      	movs	r1, #3
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43db      	mvns	r3, r3
 8000568:	401a      	ands	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	4619      	mov	r1, r3
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	431a      	orrs	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	b29b      	uxth	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	2301      	movs	r3, #1
 8000592:	408b      	lsls	r3, r1
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	7992      	ldrb	r2, [r2, #6]
 80005a4:	4611      	mov	r1, r2
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	b292      	uxth	r2, r2
 80005aa:	fa01 f202 	lsl.w	r2, r1, r2
 80005ae:	b292      	uxth	r2, r2
 80005b0:	431a      	orrs	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	2103      	movs	r1, #3
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	401a      	ands	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	79db      	ldrb	r3, [r3, #7]
 80005d6:	4619      	mov	r1, r3
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d985      	bls.n	80004fe <GPIO_Init+0x1c>
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <RCC_AHB1PeriphClockCmd>:
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <RCC_AHB1PeriphClockCmd+0x20>
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000616:	4909      	ldr	r1, [pc, #36]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4313      	orrs	r3, r2
 800061c:	630b      	str	r3, [r1, #48]	; 0x30
 800061e:	e006      	b.n	800062e <RCC_AHB1PeriphClockCmd+0x2e>
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	43db      	mvns	r3, r3
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <RCC_AHB1PeriphClockCmd+0x3c>)
 800062a:	4013      	ands	r3, r2
 800062c:	630b      	str	r3, [r1, #48]	; 0x30
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <__libc_init_array>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	4d0d      	ldr	r5, [pc, #52]	; (8000678 <__libc_init_array+0x38>)
 8000644:	4c0d      	ldr	r4, [pc, #52]	; (800067c <__libc_init_array+0x3c>)
 8000646:	1b64      	subs	r4, r4, r5
 8000648:	10a4      	asrs	r4, r4, #2
 800064a:	2600      	movs	r6, #0
 800064c:	42a6      	cmp	r6, r4
 800064e:	d109      	bne.n	8000664 <__libc_init_array+0x24>
 8000650:	4d0b      	ldr	r5, [pc, #44]	; (8000680 <__libc_init_array+0x40>)
 8000652:	4c0c      	ldr	r4, [pc, #48]	; (8000684 <__libc_init_array+0x44>)
 8000654:	f000 f818 	bl	8000688 <_init>
 8000658:	1b64      	subs	r4, r4, r5
 800065a:	10a4      	asrs	r4, r4, #2
 800065c:	2600      	movs	r6, #0
 800065e:	42a6      	cmp	r6, r4
 8000660:	d105      	bne.n	800066e <__libc_init_array+0x2e>
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f855 3b04 	ldr.w	r3, [r5], #4
 8000668:	4798      	blx	r3
 800066a:	3601      	adds	r6, #1
 800066c:	e7ee      	b.n	800064c <__libc_init_array+0xc>
 800066e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000672:	4798      	blx	r3
 8000674:	3601      	adds	r6, #1
 8000676:	e7f2      	b.n	800065e <__libc_init_array+0x1e>
 8000678:	080006a0 	.word	0x080006a0
 800067c:	080006a0 	.word	0x080006a0
 8000680:	080006a0 	.word	0x080006a0
 8000684:	080006a4 	.word	0x080006a4

08000688 <_init>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	bf00      	nop
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr

08000694 <_fini>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr
